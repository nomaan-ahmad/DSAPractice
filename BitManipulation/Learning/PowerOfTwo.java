package BitManipulation.Learning;

// https://leetcode.com/problems/power-of-two/description/
public class PowerOfTwo {
    public static void main(String[] args) {
        int n = 256;
        System.out.println(isPowerOfTwo(n));
    }

    /*
    *  Just a heads-up: 0 is not a power of 2
    *
    *  ## Logic
    *  We are assuming that the number(n) is power of 2
    *  Any number which is power of 2 has a unique property which is that there is only 1 set bit. Primarily MSB is set
    *  So we'll take advantage of this fact.
    *  There is one more observation, any number which is generated by subtracting 1 from any power of 2 has all bit set except the bit which is set in the number which is power 2
    *  Lets say: We have a number 16 : 10000 | We can see only the MSB is set and rest all is bit is unset
    *  Number which we get by subtracting 1 from 16 is 15 : 01111. Notice how all bit is set except the MSB
    *
    *  This is the logic behind knowing whether a number is power of 2 or not.
    *  If we do bitwise & of both number (16 & 15), it will always give us 0
    * */
    public static boolean isPowerOfTwo(int n) {
        return (n > 0 && ((n & (n-1)) == 0));
    }
}
